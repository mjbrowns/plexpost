#!/usr/bin/env bash
[ -f ${QUEUEDIR}/.debug ] && set -x

do_log() {
    now="$(date +'%b %d %X')"
    echo "$now - ${QE} - $@"

}

die() {
    do_log "${@}"
    trap "" SIGINT SIGTERM SIGHUP
    exit 1
}

cleanup() {
    [ -z "${WORKDIR}" ] && return
    [ -d ${WORKDIR} ] && rm -rf ${WORKDIR}
}

setInputFile() {
    IF="$1"  # full file path
    SRCDIR="${IF%/*}"   # just the directory portion, e.g. dirname
    SRCFN="${IF##*/}"   # base filename no directory, e.g. basename
    SRCFNB=${SRCFN%.*}  # filename without extension
    SRCEXT=${SRCFN##*.} # file extension
    OF="${SRCDIR}/${SRCFNB}.mkv"
    OF2="${SRCDIR}/${SRCFNB}.mkv-orig"
    [ -z "${IF}" ]  && die "ERROR: (setInputFile) - Calculated input file is blank!"
    [ -f "${IF}" ]  || die "ERROR: (setInputFile) - Input file doesn't exist: ${IF}"
    [ -f "${OF2}" ] && die "ERROR: (setInputFile) - Output file already exists: ${OF2}"
    ln -sf "${IF}" "${WF1}" || die "ERROR: (setInputFile) - Failed to link input to ${WF1}"
}

findSourceFile() {
    local FN="$1"
    local FNB="${FN%.*}"
    SHOWNAME=${FN%% -*}

    _check=$(find ${TVDIR} ${MVDIR} -type f -name "${FNB}.*" |wc -l)
    [ ${_check} -gt 1 ] && die "ERROR: multiple input files found!"
    [ ${_check} -eq 0 ] && die "ERROR: couldn't find input file ($FNB) in library!"
    local FP=$(find ${TVDIR} ${MVDIR} -name "${FNB}.*")
    setInputFile "$FP"
}

doComskip() {
    do_log "INFO: (doComskip) - Starting Commercial detection"
    rm -f "${WORKDIR}/*.edl"
    ${COMSKIP} --ini="${WORKDIR}/comskip.ini" "${WF1}" &> ${WORKDIR}/comskip.log
    STS=$?
    case $STS in
        0)  # everything went well, we think
            do_log "INFO: (doComskip) - Commercials were detected"
            ;;
        1)  # success, but no commercials detected
            do_log "WARNING: (doComskip) - No Commercials Detected" 
            echo "WARNING: (doComskip) - No Commercials Detected" > ${QFW}
            [ -f "${WF1%.*}.edl" ] && rm "${WF1%.*}.edl"
            return 0
            ;;
        *)  die "ERROR: (doComskip) - comskip exited with error $STS"
            ;;
    esac
    if [ ! -f "${WF1%.*}.edl" ]; then 
        do_log "WARNING: (doComskip) - EDL file not found"
        echo "WARNING: (doComskip) - EDL file not found" > ${QFW}
        return 0
    fi
}

doComchap() {
    do_log "INFO: (doComchap) - Marking Commercials in source file"
    if [ -f "${WF1%.*}.edl" ] ; then
        do_log "INFO: (doComchap) - No EDL file available, skipping"
        ln -sf "${WF1}" "${WF2}"
        return 0
    fi
    /usr/local/bin/comchap \
        --verbose \
        --ffmpeg="$FFMPEG" \
        --comskip="$COMSKIP" \
        --comskip-ini="${WORKDIR}/comskip.ini" \
        "${WF1}" "${WF2}" \
        &> ${WORKDIR}/comchap.log || die "ERROR: (doComchap) - comchap exited with error $?"
    return 0
}

doComcut() {
    do_log "INFO: (doComcut) - Starting Commercial Cutting"
    if [ ! -f "${WF1%.*}.edl" ]; then
        do_log "INFO: (doComcut) - No EDL file available, skipping"
        ln -sf "${WF1}" "${WF2}"
        return 0
    fi
    /usr/local/bin/comcut \
        --ffmpeg="${FFMPEG}" \
        --comskip="${COMSKIP}" \
        --comskip-ini="${WORKDIR}/comskip.ini" \
        "${WF1}" "${WF2}" \
        &> ${WORKDIR}/comcut.log || die "ERROR: comcut exited with error $?"
    return 0
}

doTranscode() {
    [ -z "${TRANSCODER}" ] && TRANSCODER="/usr/local/bin/plexprocess-transcode"
    do_log "INFO: (doTranscode) - Starting Transcode (using ${TRANSCODER##*/})"
    
    ${TRANSCODER} "${WF2}" "${WF3}" &> ${WORKDIR}/transcode.log || die "ERROR: plexprocess-transcode exited with error $?"
    if [ ! -f "${WF3}" ] ;then
        die "ERROR: (doTranscode) Transcoder thread exited but did not provide an output file! Can not continue!"
    fi
    OLDSZ=$(stat -Lc %s "${WF2}")
    NEWSZ=$(stat -Lc %s "${WF3}")
    if [ $((${OLDSZ}/8 > ${NEWSZ})) -ne 0 ]; then
        echo "WARNING: (doTranscode) Transcoded file smaller than expected ($OLDSZ vs $NEWSZ)!" > "${QFW}"
        do_log "WARNING: (doTranscode) Transcoded file smaller than expected ($OLDSZ vs $NEWSZ)!"
    fi
    return 0
}

doFinalMove() {
    [ -f "$WF3" ] || die "ERROR: (doFinalMove) Transcoded output file not found! ($WF3)"
    do_log "INFO: (doFinalMove) - Renaming original file to ${OF2}"
    mv "${IF}" "${OF2}" || die "ERROR: (doFinalMove) Failed to rename original file!"
    do_log "INFO: (doFinalMove) - Moving transcoded file to media directory: ${OF}"
    mv "${WF3}" "${OF}" || die "ERROR: (doFinalMove) Failed to move transcoded file to media directory!"
    if [ "${REMOVETS}" = "1" ];then
        rm "${OF2}"
    fi
    return 0
}

prepComskip() {
    # look for filters file and if its there see if we can find a match
    if [ -r "${COMSKIP_INI}/filters.cfg" ]; then
        while read f; do
            local INI="${f##*=}"
            local MATCH="${f%%=*}"
            if [ ! -f "${COMSKIP_INI}/$INI" -o ! -r "${COMSKIP_INI}/$INI" ]; then
                do_log "ERROR: (prepComskip) - Ini file in filters.cfg not found or not readable ($INI)"
                continue
            fi
            if [[ $SHOWNAME == $MATCH ]] ;then
                do_log "INFO: (prepComskip) - Using comskip ini file ${COMSKIP_INI}/$INI"
                /usr/local/bin/clean-comskipini < "${COMSKIP_INI}/$INI" > "${WORKDIR}/comskip.ini"
                return 0
            fi
        done < "${COMSKIP_INI}/filters.cfg"
    fi
    # Fallback - if we didn't get a filter match, we use the default comskip.ini in the config directory
    if [ -f "${COMSKIP_INI}/comskip.ini" ];then
        do_log "INFO: (prepComskip) - Using comskip ini file ${COMSKIP_INI}/comskip.ini"
        /usr/local/bin/clean-comskipini < "${COMSKIP_INI}/comskip.ini" > "${WORKDIR}/comskip.ini"
        return 0
    fi 
    # Fallback2 - if we got here something is wrong with the config directory; use the provided one
    do_log "INFO: (prepComskip) - Using comskip ini file /usr/local/etc/comskip.ini"
    /usr/local/bin/clean-comskipini < "/usr/local/etc/comskip.ini" > "${WORKDIR}/comskip.ini"
}

#
# main processing code below
#

QE=$1
QF=${QUEUEDIR}/${QE}.job
QFD=${QUEUEDIR}/${QE}.working
QFS=${QUEUEDIR}/${QE}.save
QFW=${QUEUEDIR}/${QE}.warn

WORKDIR=${QUEUEDIR}/working-${QE}
WF1="${WORKDIR}/original.mkv"
WF2="${WORKDIR}/comproc.mkv"
WF3="${WORKDIR}/transcoded.mkv"
FFMPEG="ffmpeg -fflags +genpts -analyzeduration 2147483647 -probesize 2147483647"
COMSKIP="comskip -q -n"

mkdir -p ${WORKDIR} || die "ERROR: Couldn't create working directory ${WORKDIR}"
cd ${WORKDIR} || die "ERROR: Couldn't change to working directory ${WORKDIR}"
trap "die 'SIGNAL: Caught signal'" SIGINT SIGTERM SIGHUP

#
# now we pull in the queue job file and we find the source file.
# if there are too many matches we will abort.
#
[ -f "${QF}" ] || die "ERROR: Couldn't find job queue file ${QF}"
do_log "INFO: (plexprocess) - Starting ${SRCFNB}"
mv "${QF}" "${QFD}" || die "ERROR: Could not transition job entry from queued to working"

findSourceFile "$(< ${QFD})"

case "${COMCUT}" in
    -1)
        WF2="${WF1}"
        ;;
    0)
        prepComskip
        doComskip
        doComchap
        ;;
    1)
        prepComskip
        doComskip
        doComcut
        ;;
esac

doTranscode
doFinalMove

#
# all done
#
do_log "INFO: (plexprocess) - Successful completion."
trap "" SIGINT SIGTERM SIGHUP
mv "${QFD}" "${QFS}"
cleanup 

